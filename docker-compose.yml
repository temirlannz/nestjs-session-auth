services:
  backend:
    build: .
    container_name: backend-session-auth
    ports:
      - "${APP_PORT}:${APP_PORT}"
    env_file:
      - .env.development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - backend-net
    volumes:
      - ./:/app
      - /app/node_modules
    command: yarn start:dev

    develop:
      watch:
        - action: sync
          path: .
          target: /app
        - action: rebuild
          path: package.json
        - action: rebuild
          path: yarn.lock

  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - backend-net
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis
    command: redis-server --requirepass "${REDIS_PASSWORD}"
    ports:
      - "${REDIS_PORT}:6379"
    restart: unless-stopped
    networks:
      - backend-net

volumes:
  postgres-data:

networks:
  backend-net:
